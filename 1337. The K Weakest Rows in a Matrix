1337. The K Weakest Rows in a Matrix

Given a m * n matrix mat of ones (representing soldiers) and zeros (representing civilians), return the indexes of the 
k weakest rows in the matrix ordered from the weakest to the strongest.

A row i is weaker than row j, if the number of soldiers in row i is less than the number of soldiers in row j, or they have 
the same number of soldiers but i is less than j. Soldiers are always stand in the frontier of a row, that is, always ones may 
appear first and then zeros.

Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers for each row is: 
row 0 -> 2 
row 1 -> 4 
row 2 -> 1 
row 3 -> 2 
row 4 -> 5 
Rows ordered from the weakest to the strongest are [2,0,3,1,4]


class Solution {
public:
    bool sortbydesc(const pair<int,int>&a,const pair<int,int>&b)
    {
        return a.second > b.second;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
       vector< pair<int,int>> intermediate;
        vector<int>result;
        for(int i=0;i<mat.size();i++)
        {
            int counter=0;
            for(int j=0;j<mat[i].size();j++)
            {
                if(mat[i][j] ==1)
                    counter++;
            }
            intermediate.push_back(make_pair(i,counter));
        }
        sort(intermediate.begin(),intermediate.end(), [](const pair<int,int> &left, const pair<int,int> &right){
            if(left.second == right.second)
                return left.first < right.first;
             return left.second < right.second;});
        for(int i=0;i<k;i++)
        {
           result.push_back(intermediate[i].first);
        }
        return result;
    
    }
};


/*Things Learnt
** using pair in vector to stores key value, using .first and .second to get the first and second value
** using custom lambda function to compare and sort as per the requirement

*/