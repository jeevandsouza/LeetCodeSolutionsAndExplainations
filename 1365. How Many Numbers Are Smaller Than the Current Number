1365. How Many Numbers Are Smaller Than the Current Number

Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).

class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int>num,result;
        num = nums;
        unordered_map<int,int>interim;
        int size = nums.size()-1;
        sort(num.begin(),num.end(),greater<int>());
        for(int i=0;i<num.size();i++)
        {
                interim[num[i]] = size;
                size--;
        }
        for(int i=0;i<nums.size();i++)
            result.push_back(interim[nums[i]]);
        return result;
        
    }
};


/* things learnt
** Using hashing and sorting we can solve it in O(nlogn).
** sort the array store the rank and return the rank through looping.
 
*/