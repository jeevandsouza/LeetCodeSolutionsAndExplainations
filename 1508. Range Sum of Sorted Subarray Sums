1508. Range Sum of Sorted Subarray Sums

Given the array nums consisting of n positive integers. You computed the sum of all non-empty continous subarrays from the 
array and then sort them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.
Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer 
can be a huge number return it modulo 10^9 + 7.

Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the 
new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13.

class Solution {
public:
    int rangeSum(vector<int>& nums, int n, int left, int right) {
        vector<int>result;
      long long returnResult=0,sum=0;
        for(int i=0;i<n-1;i++)
        {
           result.push_back(nums[i]);
            sum+=nums[i];
            for(int j=i+1;j<n;j++)
            {
                sum+=nums[j];
                result.push_back(sum);
            }
            sum = 0;
        }
         result.push_back(nums[n-1]);
        sort(result.begin(),result.end());
        
         for(int i=left-1;i<right;i++)
            returnResult= (returnResult+ result[i]) % 1000000007;
        return returnResult;
    }
};


/* Things learnt
**How to use priority queues and where they come in handy
**priority queues stores data in descending order when u push data-> priority_queue<int>p; p.push(1);
** in STL we can use it  priority_queue<type, vector<type>, CompareClass()> pqueue;
** here type is int or any other datatype, vector<int> or char, class is a custom class to perform any other action
eg:- priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> mqueue;
p = mqueue.top(); and p.first and p.second will give data

*/