225. Implement Stack using Queues
class MyStack {
public:
    /** Initialize your data structure here. */
    queue<int>q1,q2;
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q2.push(x);
        while(!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
         queue<int>q3;
        q3=q1;
        q1=q2;
        q2=q3;
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
      int result =  q1.front();
            q1.pop();
        return result;
    }
    
    /** Get the top element. */
    int top() {
        int result =  q1.front();
        return result;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(q1.empty())
            return true;
        return false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */


/*Things Learnt
** Learnt to use queues in STL it's functions such as push,pop,front,empty,top etc
** To implement queue using stack we have to make either push or pop operation costly
** we take 2 queues add the recent element to the queue then put all other elements from the other queue so that the most recent
 one is on the top and swap the names
*/