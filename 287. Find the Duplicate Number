287. Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

Input: nums = [1,3,4,2,2]
Output: 2

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i] == nums [i+1])
                return nums[i];
        }
        return 1;
    }
};

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_map<int,int>count;
        for(int i=0;i<nums.size();i++)
            count[nums[i]]++;
        for ( auto it = count.begin(); it != count.end(); ++it )
        {
            if(it->second >= 2)
                return it->first;
        }
        return 0;
    }
};

/* Things learnt
** The above solution is O(n logn) time due to sort, to get O(n) we can use hashing that is the second solution.
** The below appraoch is difficult to understand but is O(n) and O(1) here we take slow to increment by 1 and fast to 
increment by 2 and find the answer.
*/

int findDuplicate3(vector<int>& nums)
{
	if (nums.size() > 1)
	{
		int slow = nums[0];
		int fast = nums[nums[0]];
		while (slow != fast)
		{
			slow = nums[slow];
			fast = nums[nums[fast]];
		}

		fast = 0;
		while (fast != slow)
		{
			fast = nums[fast];
			slow = nums[slow];
		}
		return slow;
	}
	return -1;
}

