454. 4Sum II

Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.

Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0

class Solution {
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        unordered_map<int,int>store;
        int count = 0,sum;
        for(int i=0;i<A.size();i++)
        {
            for(int j=0;j<B.size();j++)
              store[A[i] + B[j]]++;
        }
        
        for(int i=0;i<C.size();i++)
        {
            for(int j=0;j<D.size();j++)
            {
                sum =  -1 * (C[i] + D[j]);
                if(store[sum] > 0)
                    count += store[sum];
                    
                
            }
        }
        return count;
    }
};

/*Things learnt
** O(n^2) time complexity using hashing.

*/

