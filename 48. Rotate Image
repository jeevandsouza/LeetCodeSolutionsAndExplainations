48. Rotate Image

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        vector<vector<int>>vec(matrix.size(),vector<int>(matrix.size(),0));
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[i].size();j++)
            {
               vec[j][vec.size()-1-i] = matrix[i][j];
            }
        }
        matrix = vec;
    }
};


/* Things learnt
** The above solution uses a placeholder vector.
**We learnt how to initialize 0 for a 2D vector
**To do in-place exchange we have to first reverse the matrix and and then change the symmetry across the diagonal
(High school math, all rotation are reflection, here it is first reflection across vertical line of symmetry and then diagonal)
1 2 3   vertical line reflection   7 8 9  diagonal reflection   7 4 1
4 5 6  ------------------------->  4 5 6 -------------------->  8 5 2
7 8 9							   1 2 3						9 6 3
*/

void rotate(vector<vector<int> > &matrix) {
    reverse(matrix.begin(), matrix.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}

