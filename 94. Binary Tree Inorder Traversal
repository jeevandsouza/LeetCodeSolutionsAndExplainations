94. Binary Tree Inorder Traversal

Given the root of a binary tree, return the inorder traversal of its nodes' values.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void InorderTravese(TreeNode* root, vector<int>& result)
    {
        if(root == NULL)
            return;
         InorderTravese(root->left,result);
        result.push_back(root->val);
        InorderTravese(root->right,result);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>result;
        InorderTravese(root,result);
        return result;
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void InorderTravese(TreeNode* root, vector<int>& result)
    {
       /* Using a stack we can solve this with an iterative approach, add nodes to stack until left tree is null then take the top element and print it , if there is a right node assign it and do the same operation else keep popping the stack until it is empty.*/
        stack<TreeNode*>s;
        TreeNode* temp = root;
        while(temp != NULL || !s.empty())
        {
            while(temp != NULL)
            {
                s.push(temp);
                temp = temp->left;
            }
            temp = s.top();
            s.pop();
            result.push_back(temp->val);
            temp = temp->right;
        }
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
       InorderTravese(root,result);
        return result;
    }
};

/* Things learnt
**Using stack for iterative approach
*/

